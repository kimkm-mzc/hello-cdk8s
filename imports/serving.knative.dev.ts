// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema Configuration
 */
export class Configuration extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Configuration"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'serving.knative.dev/v1',
    kind: 'Configuration',
  }

  /**
   * Renders a Kubernetes manifest for "Configuration".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ConfigurationProps = {}): any {
    return {
      ...Configuration.GVK,
      ...toJson_ConfigurationProps(props),
    };
  }

  /**
   * Defines a "Configuration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ConfigurationProps = {}) {
    super(scope, id, {
      ...Configuration.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Configuration.GVK,
      ...toJson_ConfigurationProps(resolved),
    };
  }
}

/**
 * @schema Configuration
 */
export interface ConfigurationProps {
  /**
   * @schema Configuration#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'ConfigurationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationProps(obj: ConfigurationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema Revision
 */
export class Revision extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Revision"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'serving.knative.dev/v1',
    kind: 'Revision',
  }

  /**
   * Renders a Kubernetes manifest for "Revision".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RevisionProps = {}): any {
    return {
      ...Revision.GVK,
      ...toJson_RevisionProps(props),
    };
  }

  /**
   * Defines a "Revision" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RevisionProps = {}) {
    super(scope, id, {
      ...Revision.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Revision.GVK,
      ...toJson_RevisionProps(resolved),
    };
  }
}

/**
 * @schema Revision
 */
export interface RevisionProps {
  /**
   * @schema Revision#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'RevisionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RevisionProps(obj: RevisionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema Route
 */
export class Route extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Route"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'serving.knative.dev/v1',
    kind: 'Route',
  }

  /**
   * Renders a Kubernetes manifest for "Route".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RouteProps = {}): any {
    return {
      ...Route.GVK,
      ...toJson_RouteProps(props),
    };
  }

  /**
   * Defines a "Route" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RouteProps = {}) {
    super(scope, id, {
      ...Route.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Route.GVK,
      ...toJson_RouteProps(resolved),
    };
  }
}

/**
 * @schema Route
 */
export interface RouteProps {
  /**
   * @schema Route#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'RouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RouteProps(obj: RouteProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema Service
 */
export class Service extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Service"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'serving.knative.dev/v1',
    kind: 'Service',
  }

  /**
   * Renders a Kubernetes manifest for "Service".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ServiceProps = {}): any {
    return {
      ...Service.GVK,
      ...toJson_ServiceProps(props),
    };
  }

  /**
   * Defines a "Service" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ServiceProps = {}) {
    super(scope, id, {
      ...Service.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Service.GVK,
      ...toJson_ServiceProps(resolved),
    };
  }
}

/**
 * @schema Service
 */
export interface ServiceProps {
  /**
   * @schema Service#spec
   */
  readonly spec?: ServiceSpec;

  /**
   * @schema Service#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'ServiceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceProps(obj: ServiceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'spec': toJson_ServiceSpec(obj.spec),
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ServiceSpec
 */
export interface ServiceSpec {
  /**
   * A template for the current desired application state.
   * Changes to `template` will cause a new Revision to be created as
   * defined in the lifecycle section. The contents of the Service's
   * RevisionTemplateSpec is used to create a corresponding Configuration.
   *
   *
   * @schema ServiceSpec#template
   */
  readonly template?: any;

  /**
   * Traffic specifies how to distribute traffic over a
   * collection of Revisions belonging to the Service. If traffic is
   * empty or not provided, defaults to 100% traffic to the latest
   * `Ready` Revision. The contents of the Service's TrafficTarget is
   * used to create a corresponding Route.
   *
   *
   * @schema ServiceSpec#traffic
   */
  readonly traffic?: ServiceSpecTraffic[];

}

/**
 * Converts an object of type 'ServiceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceSpec(obj: ServiceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
    'traffic': obj.traffic?.map(y => toJson_ServiceSpecTraffic(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ServiceSpecTraffic
 */
export interface ServiceSpecTraffic {
  /**
   * A specific revision to which to send this portion
   * of traffic.
   * This is mutually exclusive with configurationName.
   *
   *
   * @schema ServiceSpecTraffic#revisionName
   */
  readonly revisionName?: string;

  /**
   * ConfigurationName of a configuration to whose latest revision we will send
   * this portion of traffic. When the "status.latestReadyRevisionName" of the
   * referenced configuration changes, we will automatically migrate traffic
   * from the prior "latest ready" revision to the new one.  This field is never
   * set in Route's status, only its spec.
   * This is mutually exclusive with RevisionName.
   *
   *
   * @schema ServiceSpecTraffic#configurationName
   */
  readonly configurationName?: string;

  /**
   * `latestRevision` may be optionally provided to indicate
   * that the latest ready Revision of the Configuration should be used
   * for this traffic target. When provided latestRevision MUST be true
   * if revisionName is empty, and it MUST be false when revisionName is non-empty.
   *
   *
   * @schema ServiceSpecTraffic#latestRevision
   */
  readonly latestRevision?: boolean;

  /**
   * Tag is optionally used to expose a dedicated URL for
   * referencing this target exclusively. The dedicated URL MUST include
   * in it the string provided by tag.
   *
   *
   * @schema ServiceSpecTraffic#tag
   */
  readonly tag?: string;

  /**
   * The percentage of requests which should be allocated
   * from the main Route domain name to the specified `revisionName` or
   * `configurationName`.
   * All `percent` values in `traffic` MUST sum to 100.
   *
   *
   * @schema ServiceSpecTraffic#percent
   */
  readonly percent?: number;

}

/**
 * Converts an object of type 'ServiceSpecTraffic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceSpecTraffic(obj: ServiceSpecTraffic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'revisionName': obj.revisionName,
    'configurationName': obj.configurationName,
    'latestRevision': obj.latestRevision,
    'tag': obj.tag,
    'percent': obj.percent,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

