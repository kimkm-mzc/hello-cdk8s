// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema Certificate
 */
export class Certificate extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Certificate"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.internal.knative.dev/v1alpha1',
    kind: 'Certificate',
  }

  /**
   * Renders a Kubernetes manifest for "Certificate".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CertificateProps = {}): any {
    return {
      ...Certificate.GVK,
      ...toJson_CertificateProps(props),
    };
  }

  /**
   * Defines a "Certificate" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CertificateProps = {}) {
    super(scope, id, {
      ...Certificate.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Certificate.GVK,
      ...toJson_CertificateProps(resolved),
    };
  }
}

/**
 * @schema Certificate
 */
export interface CertificateProps {
  /**
   * @schema Certificate#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'CertificateProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CertificateProps(obj: CertificateProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema Ingress
 */
export class Ingress extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Ingress"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.internal.knative.dev/v1alpha1',
    kind: 'Ingress',
  }

  /**
   * Renders a Kubernetes manifest for "Ingress".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IngressProps = {}): any {
    return {
      ...Ingress.GVK,
      ...toJson_IngressProps(props),
    };
  }

  /**
   * Defines a "Ingress" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IngressProps = {}) {
    super(scope, id, {
      ...Ingress.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Ingress.GVK,
      ...toJson_IngressProps(resolved),
    };
  }
}

/**
 * @schema Ingress
 */
export interface IngressProps {
  /**
   * @schema Ingress#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'IngressProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressProps(obj: IngressProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema ServerlessService
 */
export class ServerlessService extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ServerlessService"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.internal.knative.dev/v1alpha1',
    kind: 'ServerlessService',
  }

  /**
   * Renders a Kubernetes manifest for "ServerlessService".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ServerlessServiceProps = {}): any {
    return {
      ...ServerlessService.GVK,
      ...toJson_ServerlessServiceProps(props),
    };
  }

  /**
   * Defines a "ServerlessService" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ServerlessServiceProps = {}) {
    super(scope, id, {
      ...ServerlessService.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ServerlessService.GVK,
      ...toJson_ServerlessServiceProps(resolved),
    };
  }
}

/**
 * @schema ServerlessService
 */
export interface ServerlessServiceProps {
  /**
   * @schema ServerlessService#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'ServerlessServiceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServerlessServiceProps(obj: ServerlessServiceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

